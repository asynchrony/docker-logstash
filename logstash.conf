input {
  tcp {
    type => syslog
    port => 5000
  }
  udp {
    type => syslog
    port => 5000
  }
  tcp {
    port  => 5001
    codec => json_lines
    type  => "systemd"
  }
#  gelf {
#    type => gelf
#  }
}

filter {
  if [type] == "systemd" {
    mutate { 
      rename => [ "_BOOT_ID", "boot-id" ] 
      rename => [ "_CAP_EFFECTIVE", "cap-effective" ]
      rename => [ "_CMDLINE", "cmdline" ]
      rename => [ "_COMM", "comm" ]
      rename => [ "_EXE", "exe" ]
      rename => [ "_GID", "gid" ]
      rename => [ "_HOSTNAME", "hostname" ]
      rename => [ "_MACHINE_ID", "machine-id" ]
      rename => [ "_PID", "pid" ]
      rename => [ "_SELINUX_CONTEXT", "selinux-context" ]
      rename => [ "_SYSTEMD_CGROUP", "systemd-cgroup" ]
      rename => [ "_SYSTEMD_SLICE", "systemd-slice" ]
      rename => [ "_TRANSPORT", "transport" ]
      rename => [ "_UID", "uid" ]
      rename => [ "__CURSOR", "cursor" ]
      rename => [ "__MONOTONIC_TIMESTAMP", "monotonic-timestamp" ]
      rename => [ "__REALTIME_TIMESTAMP", "realtime-timestamp" ]
      rename => [ "_SOURCE_REALTIME_TIMESTAMP", "source-realtime-timestamp" ]
      rename => [ "MESSAGE", "message" ]
      rename => [ "_SYSTEMD_UNIT", "systemd-unit" ]
      
      if [systemd-unit] == "docker.service"{
        kv{ 
          source => "message"
          prefix => "docker-service_"
        }
      }
      else if [systemd-unit] == "kibana.service"{
        json{ 
          source => "message"
        }
      }
      else if [systemd-unit] == "elasticsearch.service"{
        grok{ 
          match => ["message","\[%{DATA:elasticsearch_timestamp}\]\[%{DATA:elasticsearch_loglevel}\]%{GREEDYDATA:elasticsearch_message}"]
          overwrite => [ "message" ]
        }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
  }
}
